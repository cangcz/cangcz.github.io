<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>怎么都过不了</title>
    <url>/2022/06/06/difficult/</url>
    <content><![CDATA[<h1 id="codeup"><a href="#codeup" class="headerlink" title="codeup"></a>codeup</h1><h2 id="To-Fill-or-Not-to-Fill"><a href="#To-Fill-or-Not-to-Fill" class="headerlink" title="To Fill or Not to Fill"></a>To Fill or Not to Fill</h2><blockquote>
<p>健健一直想不出来，我想了个和参考不太一样的方法，初始化每个加油站的start和end，遍历每个加油站可到达的加油站，比较价格，修改start和end。</p>
</blockquote>
<p>只过了pat</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//codeup To Fill or Not to Fill</span></span><br><span class="line"><span class="comment">//汽油容量 距离 每个gas可跑距离 汽油站数量</span></span><br><span class="line"><span class="comment">//59	  525	 19				2</span></span><br><span class="line"><span class="comment">//单价	   距离</span></span><br><span class="line"><span class="comment">//3			314</span></span><br><span class="line"><span class="comment">//3			 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">station</span> &#123;</span><br><span class="line">	<span class="type">double</span> price;</span><br><span class="line">	<span class="type">double</span> start;</span><br><span class="line">	<span class="type">double</span> end;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(station a, station b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.start &lt; b.start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> max, meter, per_meter, n;</span><br><span class="line">	station sta[<span class="number">510</span>];</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; max &gt;&gt; meter &gt;&gt; per_meter &gt;&gt; n) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			cin &gt;&gt; sta[i].price &gt;&gt; sta[i].start;</span><br><span class="line">			sta[i].end = sta[i].start + max * per_meter;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">sort</span>(sta, sta + n, cmp);</span><br><span class="line">		<span class="comment">/*for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">			cout &lt;&lt; &quot;排序结果\n&quot;;</span></span><br><span class="line"><span class="comment">			cout &lt;&lt; sta[i].start &lt;&lt; &quot;  &quot; &lt;&lt; sta[i].end &lt;&lt; &quot; &quot;&lt;&lt;sta[i].price&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		<span class="keyword">if</span> (sta[<span class="number">0</span>].start != <span class="number">0</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;The maximum travel distance = &quot;</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,<span class="number">0.00</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (sta[i].end &gt; meter) &#123;</span><br><span class="line">				sta[i].end = meter;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (sta[j].start &lt; sta[i].end) &#123;</span><br><span class="line">					<span class="keyword">if</span> (sta[j].price &lt;= sta[i].price) &#123;<span class="comment">//新的更便宜</span></span><br><span class="line">						<span class="keyword">if</span>(sta[i].start&gt;sta[j].start &amp;&amp;sta[i].end&lt;sta[j].end)&#123;<span class="comment">//被包围</span></span><br><span class="line">							sta[i].end = sta[i].start;</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						sta[i].end = sta[j].start;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						sta[j].start = sta[i].end;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;<span class="comment">//没有加油站了</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">double</span> money = <span class="number">0</span>, all_meter = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="comment">//cout &lt;&lt; sta[i].start &lt;&lt; &quot;  &quot; &lt;&lt; sta[i].end &lt;&lt; endl;</span></span><br><span class="line">			all_meter += sta[i].end - sta[i].start;</span><br><span class="line">			money += (sta[i].end - sta[i].start) / per_meter * sta[i].price;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (all_meter &lt; meter) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;The maximum travel distance = &quot;</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, all_meter);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, money);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="【递归入门】出栈序列统计"><a href="#【递归入门】出栈序列统计" class="headerlink" title="【递归入门】出栈序列统计"></a>【递归入门】出栈序列统计</h2><p>是一道深度优先的递归题，抄了答案，对递归还是不太明白。<br>[8.1小节递归入门E]: <a class="link"   href="http://codeup.hustoj.com/problem.php?cid=100000608&amp;pid=4" >http://codeup.hustoj.com/problem.php?cid=100000608&amp;pid=4<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> in, <span class="type">int</span> out)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (out &gt; n) &#123;</span><br><span class="line">		cnt++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (in &gt; n || out &gt; in) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">f</span>(in + <span class="number">1</span>, out);</span><br><span class="line">		<span class="built_in">f</span>(in, out + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">		cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">f</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>随机数</title>
    <url>/2022/06/20/%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    <content><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="普通随机数"><a href="#普通随机数" class="headerlink" title="普通随机数"></a>普通随机数</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rand</span>()</span><br></pre></td></tr></table></figure>

<h1 id="0-b-a"><a href="#0-b-a" class="headerlink" title="[0,b-a]"></a>[0,b-a]</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rand</span>()%(b-a+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="a-b"><a href="#a-b" class="headerlink" title="[a,b]"></a>[a,b]</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rand</span>()%(b-a+<span class="number">1</span>)+a</span><br></pre></td></tr></table></figure>

<h1 id="大整数"><a href="#大整数" class="headerlink" title="大整数"></a>大整数</h1><p>rand生成的随机数不能大于RAND_MAX（stdlib.h中的一个常数，不同系统的值不同，这里int取32767），当要生成的[a,b]，b大于RAND_MAX的数时：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="type">int</span>)(<span class="built_in">round</span>(<span class="number">1.0</span>*<span class="built_in">rand</span>()/RAND_MAX*(b-a)+a))</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>小记</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂度</title>
    <url>/2022/06/20/%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><table>
<thead>
<tr>
<th align="center">算法</th>
<th align="center">最坏</th>
<th align="center">平均</th>
</tr>
</thead>
<tbody><tr>
<td align="center">快排</td>
<td align="center">O(n^2)</td>
<td align="center">O(nlogn)</td>
</tr>
<tr>
<td align="center">随机选择算法</td>
<td align="center">O(n^2)</td>
<td align="center">O(N)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><table>
<thead>
<tr>
<th align="center">算法</th>
<th align="center">复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[2,sqrt(n)]</td>
<td align="center">O(sqrt(n))</td>
</tr>
<tr>
<td align="center">埃氏筛法</td>
<td align="center">O(nloglogn)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>PaddleClas图像分类</title>
    <url>/2022/07/01/PaddleClas%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文将讲解利用PaddleCals实现对图像进行分类的任务，利用AI Studio平台训练，并通过猫十二分类例子讲解如何进行训练与预测。</p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul>
<li>PaddlePaddle 2.1.2</li>
<li>PaddleClas 2.3</li>
</ul>
<h2 id="下载PaddleClas"><a href="#下载PaddleClas" class="headerlink" title="下载PaddleClas"></a>下载PaddleClas</h2><p>此时可以将PaddleClas下载到项目中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!git clone https://gitee.com/paddlepaddle/PaddleClas/ --depth=1</span><br></pre></td></tr></table></figure>

<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h4 id="1-解压数据集"><a href="#1-解压数据集" class="headerlink" title="1.解压数据集"></a>1.解压数据集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 解压缩数据集</span><br><span class="line">!unzip -qoa data/data8136/cat_data_sets_models.zip -d data/</span><br></pre></td></tr></table></figure>
<h4 id="2-划分数据集"><a href="#2-划分数据集" class="headerlink" title="2.划分数据集"></a>2.划分数据集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def break_data(target, rate=0.2):</span><br><span class="line">    origin_dataset = pd.read_csv(&quot;/home/aistudio/data/data_sets/cat_12/train_list.txt&quot;, delimiter=&quot;\t&quot;, header=None)  # 加入参数</span><br><span class="line">    # train_data, test_data = train_test_split(origin_dataset, test_size=rate)</span><br><span class="line">    train_data,eval_data=train_test_split(origin_dataset, test_size=rate)</span><br><span class="line">    train_filename = os.path.join(target, &#x27;train.txt&#x27;)</span><br><span class="line">    # test_filename = os.path.join(target, &#x27;test.txt&#x27;)</span><br><span class="line">    eval_filename = os.path.join(target, &#x27;eval.txt&#x27;)</span><br><span class="line"></span><br><span class="line">    train_data.to_csv(train_filename, index=False, sep=&quot;\t&quot;, header=None)</span><br><span class="line">    # test_data.to_csv(test_filename, index=False, sep=&quot;\t&quot;, header=None)</span><br><span class="line">    eval_data.to_csv(eval_filename, index=False, sep=&quot;\t&quot;, header=None)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    break_data(target=&#x27;data&#x27;, rate=0.2)</span><br></pre></td></tr></table></figure>
<h4 id="3-通道转化"><a href="#3-通道转化" class="headerlink" title="3.通道转化"></a>3.通道转化</h4><p>由于图片中存在一些非RGB格式的图片，会影响训练，因此进行处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入需要的包</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">import json</span><br><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">from PIL import Image</span><br><span class="line">import paddle</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">## 转换4通道为3通道</span><br><span class="line">def proc_img(src):</span><br><span class="line">    for root, dirs, files in os.walk(src):</span><br><span class="line">        if &#x27;__MACOSX&#x27; in root:continue</span><br><span class="line">        for file in files:            </span><br><span class="line">            src=os.path.join(root,file)</span><br><span class="line">            img=Image.open(src)</span><br><span class="line">            ## 转换4通道为3通道</span><br><span class="line">            if img.mode != &#x27;RGB&#x27;: </span><br><span class="line">                    img = img.convert(&#x27;RGB&#x27;) </span><br><span class="line">                    img.save(src)    </span><br><span class="line">                    print(src)        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    proc_img(&quot;data/data_sets/cat_12/cat_12_train&quot;)</span><br><span class="line">    proc_img(&quot;data/data_sets/cat_12/cat_12_test&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><h4 id="1-修改bug"><a href="#1-修改bug" class="headerlink" title="1.修改bug"></a>1.修改bug</h4><p>由于PaddleClas2.3版本读数据存在bug，因此修改如下文件<br>目录：\ppcls\data\dataloader\imagenet_dataset.py<br>注释:</p>
<ul>
<li><code>assert os.path.exists(self._cls_path)</code></li>
<li><code>assert os.path.exists(self._img_path)</code><br>添加：</li>
<li><code>self._cls_path=os.path.join(self._img_root,self._cls_path)</code><br>同时修改with open（）as fd:中的内容如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ImageNetDataset(CommonDataset):</span><br><span class="line">    def _load_anno(self, seed=None):</span><br><span class="line">        # 会对目录进行检测，如果cls_path使用相对目录，就会报错，在此注释掉，并修改为self._cls_path=os.path.join(self._img_root,self._cls_path)</span><br><span class="line"></span><br><span class="line">        self.images = []</span><br><span class="line">        self.labels = []</span><br><span class="line"></span><br><span class="line">        with open(self._cls_path) as fd:</span><br><span class="line">            lines = fd.readlines()</span><br><span class="line">            if seed is not None:</span><br><span class="line">                np.random.RandomState(seed).shuffle(lines)</span><br><span class="line">            for l in lines:</span><br><span class="line">            	  # tab分割</span><br><span class="line">                # l = l.strip().split(&quot; &quot;)</span><br><span class="line">                l = l.strip().split(&quot;\t&quot;)</span><br><span class="line">                self.images.append(os.path.join(self._img_root, l[0]))</span><br><span class="line">                self.labels.append(int(l[1]))</span><br><span class="line">                # 不需要判断这个</span><br><span class="line">                # assert os.path.exists(self.images[-1])</span><br></pre></td></tr></table></figure>
<h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4>选择PaddleClas&#x2F;ppcls&#x2F;configs&#x2F;ImageNet&#x2F; 中的模型，这里以ResNet为例，选择其中的<code>ResNet50_vd.yaml</code>配置文件，主要修改参数如下：</li>
<li>class_num: 12<br>Train和Eval下均需修改</li>
<li>image_root: &#x2F;home&#x2F;aistudio&#x2F;data&#x2F;data_sets&#x2F;cat_12&#x2F;</li>
<li>cls_label_path: &#x2F;home&#x2F;aistudio&#x2F;data&#x2F;eval.txt</li>
</ul>
<h4 id="3-配置说明"><a href="#3-配置说明" class="headerlink" title="3.配置说明"></a>3.配置说明</h4><h6 id="3-1-全局配置-Global"><a href="#3-1-全局配置-Global" class="headerlink" title="3.1 全局配置(Global)"></a>3.1 全局配置(Global)</h6><table>
<thead>
<tr>
<th align="center">参数名字</th>
<th align="center">具体含义</th>
<th align="center">默认值</th>
<th align="center">可选值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">checkpoints</td>
<td align="center">断点模型路径，用于恢复训练</td>
<td align="center">null</td>
<td align="center">str</td>
</tr>
<tr>
<td align="center">pretrained_model</td>
<td align="center">预训练模型路径</td>
<td align="center">null</td>
<td align="center">str</td>
</tr>
<tr>
<td align="center">output_dir</td>
<td align="center">保存模型路径</td>
<td align="center">“.&#x2F;output&#x2F;“</td>
<td align="center">str</td>
</tr>
<tr>
<td align="center">save_interval</td>
<td align="center">每隔多少个epoch保存模型</td>
<td align="center">1</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">eval_during_train</td>
<td align="center">是否在训练时进行评估</td>
<td align="center">True</td>
<td align="center">bool</td>
</tr>
<tr>
<td align="center">eval_interval</td>
<td align="center">每隔多少个epoch进行模型评估</td>
<td align="center">1</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">epochs</td>
<td align="center">训练总epoch数</td>
<td align="center"></td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">print_batch_step</td>
<td align="center">每隔多少个mini-batch打印输出</td>
<td align="center">10</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">use_visualdl</td>
<td align="center">是否是用visualdl可视化训练过程</td>
<td align="center">False</td>
<td align="center">bool</td>
</tr>
<tr>
<td align="center">image_shape</td>
<td align="center">图片大小</td>
<td align="center">[3，224，224]</td>
<td align="center">list, shape: (3,)</td>
</tr>
<tr>
<td align="center">save_inference_dir</td>
<td align="center">inference模型的保存路径</td>
<td align="center">“.&#x2F;inference”</td>
<td align="center">str</td>
</tr>
<tr>
<td align="center">eval_mode</td>
<td align="center">eval的模式</td>
<td align="center">“classification”</td>
<td align="center">“retrieval”</td>
</tr>
</tbody></table>
<h6 id="3-2-结构-Arch"><a href="#3-2-结构-Arch" class="headerlink" title="3.2 结构(Arch)"></a>3.2 结构(Arch)</h6><table>
<thead>
<tr>
<th align="center">参数名字</th>
<th align="center">具体含义</th>
<th align="center">默认值</th>
<th align="center">可选值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">name</td>
<td align="center">模型结构名字</td>
<td align="center">ResNet50</td>
<td align="center">PaddleClas提供的模型结构</td>
</tr>
<tr>
<td align="center">class_num</td>
<td align="center">分类数</td>
<td align="center">1000</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">pretrained</td>
<td align="center">预训练模型</td>
<td align="center">False</td>
<td align="center">bool， str</td>
</tr>
</tbody></table>
<h6 id="3-3-损失函数（Loss）"><a href="#3-3-损失函数（Loss）" class="headerlink" title="3.3 损失函数（Loss）"></a>3.3 损失函数（Loss）</h6><table>
<thead>
<tr>
<th align="center">参数名字</th>
<th align="center">具体含义</th>
<th align="center">默认值</th>
<th align="center">可选值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CELoss</td>
<td align="center">交叉熵损失函数</td>
<td align="center">——</td>
<td align="center">——</td>
</tr>
<tr>
<td align="center">CELoss.weight</td>
<td align="center">CELoss的在整个Loss中的权重</td>
<td align="center">1.0</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">CELoss.epsilon</td>
<td align="center">CELoss中label_smooth的epsilon值</td>
<td align="center">0.1</td>
<td align="center">float，0-1之间</td>
</tr>
</tbody></table>
<h6 id="3-4-优化器-Optimizer"><a href="#3-4-优化器-Optimizer" class="headerlink" title="3.4 优化器(Optimizer)"></a>3.4 优化器(Optimizer)</h6><table>
<thead>
<tr>
<th align="center">参数名字</th>
<th align="center">具体含义</th>
<th align="center">默认值</th>
<th align="center">可选值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">name</td>
<td align="center">优化器方法名</td>
<td align="center">“Momentum”</td>
<td align="center">“RmsProp”等其他优化器</td>
</tr>
<tr>
<td align="center">momentum</td>
<td align="center">momentum值</td>
<td align="center">0.9</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">lr.name</td>
<td align="center">学习率下降方式</td>
<td align="center">“Cosine”</td>
<td align="center">“Linear”、”Piecewise”等其他下降方式</td>
</tr>
<tr>
<td align="center">lr.learning_rate</td>
<td align="center">学习率初始值</td>
<td align="center">0.1</td>
<td align="center">float</td>
</tr>
<tr>
<td align="center">lr.warmup_epoch</td>
<td align="center">warmup轮数</td>
<td align="center">0</td>
<td align="center">int，如5</td>
</tr>
<tr>
<td align="center">regularizer.name</td>
<td align="center">正则化方法名</td>
<td align="center">“L2”</td>
<td align="center">[“L1”, “L2”]</td>
</tr>
<tr>
<td align="center">regularizer.coeff</td>
<td align="center">正则化系数</td>
<td align="center">0.00007</td>
<td align="center">float</td>
</tr>
</tbody></table>
<h4 id="4-开始训练"><a href="#4-开始训练" class="headerlink" title="4.开始训练"></a>4.开始训练</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用以下命令进入项目目录</span><br><span class="line">%cd PaddleClas/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GPU设置</span><br><span class="line">!export CUDA_VISIBLE_DEVICES=0</span><br><span class="line"></span><br><span class="line"># -o Arch.pretrained=True 使用预训练模型，当选择为True时，预训练权重会自动下载到本地</span><br><span class="line">!python tools/train.py -c /home/aistudio/PaddleClas/ppcls/configs/ImageNet/ResNet/ResNet50_vd.yaml -o Arch.pretrained=True</span><br></pre></td></tr></table></figure>

<p>使用多卡训练</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!export CUDA_VISIBLE_DEVICES=0,1,2,3</span><br><span class="line">!python3 -m paddle.distributed.launch \</span><br><span class="line">    --gpus=&quot;0,1,2,3&quot; \</span><br><span class="line">    tools/train.py \</span><br><span class="line">        -c /home/aistudio/ResNet50_vd.yaml -o Arch.pretrained=True</span><br></pre></td></tr></table></figure>

<h2 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h2><p>输入以下命令进行单张图片预测：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 预测</span><br><span class="line">!python3 tools/infer.py -c /home/aistudio/ResNet50_vd.yaml -o Infer.infer_imgs=/home/aistudio/data/data_sets/cat_12/cat_12_test/ou9Ik17GtHSThRCDLZm3f6vB8ybQ4xsl.jpg  -o Global.pretrained_model=output/ResNet50_vd/best_model</span><br></pre></td></tr></table></figure>
<p>输入以下命令进行批量图片预测，并重定向到output.txt文件中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 预测</span><br><span class="line">!python3 tools/infer.py -c /home/aistudio/ResNet50_vd.yaml -o Infer.infer_imgs=/home/aistudio/data/data_sets/cat_12/cat_12_test/  -o Global.pretrained_model=output/ResNet50_vd/best_model &gt; output.txt</span><br></pre></td></tr></table></figure>
<p>输入以下命令生成提交的csv文件格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import ast</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">with open(&quot;output.txt&quot;) as f:</span><br><span class="line">    ftxt = f.read()</span><br><span class="line">    </span><br><span class="line">pattern = r&quot;&#123;&#x27;class_ids&#x27;:.*?&#125;&quot;</span><br><span class="line">pre_results = re.findall(pattern, ftxt)</span><br><span class="line">print(len(pre_results))</span><br><span class="line"></span><br><span class="line">pre_data = []</span><br><span class="line">for pre_result in pre_results:</span><br><span class="line">    pre_dict = ast.literal_eval(pre_result)  # [&quot;class_ids&quot;, &quot;scores&quot;, &quot;file_name&quot;, &quot;label_names&quot;]</span><br><span class="line">    pre_data.append([pre_dict[&quot;file_name&quot;].split(&quot;/&quot;)[-1],\</span><br><span class="line">                            pre_dict[&quot;class_ids&quot;][0], pre_dict[&quot;scores&quot;][0]])</span><br><span class="line"></span><br><span class="line">columns = [&quot;img_path&quot;, &quot;label&quot;, &quot;scores&quot;]</span><br><span class="line">pre_df = pd.DataFrame(data=pre_data,</span><br><span class="line">                       index=range(len(pre_data)), </span><br><span class="line">                       columns=columns)</span><br><span class="line"></span><br><span class="line">pre_df.drop(columns=[&#x27;scores&#x27;],inplace=True)  # 删除 scores 列</span><br><span class="line">pre_df.sort_values([&quot;img_path&quot;], inplace=True)  # 排序</span><br><span class="line">pre_df.to_csv(&#x27;submission.csv&#x27;,index=None,header=None)</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>Paddle</tag>
      </tags>
  </entry>
  <entry>
    <title>需要注意的点</title>
    <url>/2022/06/06/%E9%9C%80%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9/</url>
    <content><![CDATA[<p>刷题时经常不会直接AC，部分错误又很令人头疼，以下是部分踩过的坑，希望可以铭记于心。</p>
<h3 id="1、输出格式"><a href="#1、输出格式" class="headerlink" title="1、输出格式"></a>1、输出格式</h3><h4 id="补位"><a href="#补位" class="headerlink" title="补位"></a>补位</h4><p>需要注意题目的输出格式,可能不会直说，若是00001时，注意要在高位补0</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%05d&quot;</span>,a);<span class="comment">//以0补充</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,a);<span class="comment">//以5位右对齐输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.5f&quot;</span>,b);<span class="comment">//保留五位小数</span></span><br></pre></td></tr></table></figure>



<h4 id="科学计数法"><a href="#科学计数法" class="headerlink" title="科学计数法"></a>科学计数法</h4><p>用cout输出大数会产生科学计数法</p>
<p> iomanip——定义IO流输出输入格式的头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; 数据 &lt;&lt; endl;</span><br><span class="line"><span class="comment">//不以科学计数法输出—固定格式+0精度</span></span><br></pre></td></tr></table></figure>

<h3 id="2、取余"><a href="#2、取余" class="headerlink" title="2、取余"></a>2、取余</h3><p>要求对结果的大数取模时，若最后再取模，可能在计算过程中越界，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">	a+=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a%<span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>存在公式<br>$$<br>(a\pm b)%p&#x3D;(a%p\pm b%p)%p\<br>(a<em>b)%m&#x3D;(a%m</em>b%m)%m\<br>a^b%m&#x3D;(a%m)^b%m<br>$$<br>因此，可以在循环中取模</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">	a=(a+b)%<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br></pre></td></tr></table></figure>

<h3 id="3、时间超限"><a href="#3、时间超限" class="headerlink" title="3、时间超限"></a>3、时间超限</h3><ul>
<li><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4></li>
</ul>
<p> 利用<strong>cout</strong>和<strong>cin</strong>在数据量大时会直接超时，需使用**printf()<strong>和</strong>scanf()**。</p>
<ol>
<li><h5 id="char数组"><a href="#char数组" class="headerlink" title="char数组"></a>char数组</h5></li>
</ol>
   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5></li>
</ol>
<p>   只能用cin和cout进行输入输出，可利用<code>c_str()</code>转换为char数组。</p>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">cout&lt;&lt;s;</span><br><span class="line">printf(&quot;%s&quot;,s.c_str())</span><br></pre></td></tr></table></figure>

<h3 id="4、map和哈希表"><a href="#4、map和哈希表" class="headerlink" title="4、map和哈希表"></a>4、map和哈希表</h3><p>​	将学生名字abc9(由三个字母和一个数字组成）对应到表中，利用<code>map&lt;string,int&gt;</code>可能导致存储过大，提示段错误，因此可考虑hash表的形式。</p>
<ul>
<li><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">map&lt;string,<span class="type">int</span>&gt;clas;</span><br><span class="line">clas[<span class="string">&quot;abc9&quot;</span>]=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>可通过map.count()函数判断某键是否存在。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">clas.<span class="built_in">count</span>(<span class="string">&quot;abc9&quot;</span>);<span class="comment">//1</span></span><br><span class="line">clas.<span class="built_in">count</span>(<span class="string">&quot;aaa8&quot;</span>);<span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h4></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将字母和数字利用ASCII表映射到数字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hash</span><span class="params">(<span class="type">char</span> name[<span class="number">5</span>])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        num=num*<span class="number">26</span>+name[i]-<span class="string">&#x27;A&#x27;</span>;<span class="comment">//注意*26和减&#x27;A&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    num=num*<span class="number">10</span>+name[<span class="number">3</span>]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//注意*10和减&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转变后姓名对应着索引，可知索引最大是26*26*26*10，创建数组或vector时需注意大小。</p>
<h3 id="5、静态链表"><a href="#5、静态链表" class="headerlink" title="5、静态链表"></a>5、静态链表</h3><p>当结点的地址是比较小的整数（如5位数的地址）时，可采用静态链表，相比动态链表更加方便。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">	<span class="type">char</span> data;</span><br><span class="line">	<span class="type">int</span> next;</span><br><span class="line">&#125;node[size];</span><br><span class="line"><span class="comment">//……</span></span><br><span class="line">node[<span class="number">00011</span>].data = data;</span><br><span class="line">node[<span class="number">00011</span>].next = next;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>类型转换</title>
    <url>/2022/07/03/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h4 id="string"><a href="#string" class="headerlink" title="string"></a>string</h4><ul>
<li><h5 id="char"><a href="#char" class="headerlink" title="char"></a>char</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string a;</span><br><span class="line"><span class="type">char</span> n[<span class="number">10</span>]=a.<span class="built_in">c_str</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="int"><a href="#int" class="headerlink" title="int"></a>int</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string a;</span><br><span class="line"><span class="type">int</span> n=<span class="built_in">atoi</span>(a.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="double"><a href="#double" class="headerlink" title="double"></a>double</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string a;</span><br><span class="line"><span class="type">double</span> n=<span class="built_in">atof</span>(a.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>stack实现简单计算器</title>
    <url>/2022/07/09/stack%E5%AE%9E%E7%8E%B0%E8%AE%A1%E7%AE%97%E5%99%A8-%E5%89%8D%E7%BC%80%E3%80%81%E5%90%8E%E7%BC%80%E3%80%81%E4%B8%AD%E7%BC%80/</url>
    <content><![CDATA[<h1 id="stack实现简单计算器"><a href="#stack实现简单计算器" class="headerlink" title="stack实现简单计算器"></a>stack实现简单计算器</h1><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol>
<li><p>通过一个 index 值（索引），遍历表达式</p>
</li>
<li><p>如果发现是一个<strong>数字</strong>, 就<strong>直接入数栈</strong>。</p>
</li>
<li><p>如果发现扫描到是一个<strong>符号</strong>,  就分如下情况：</p>
<ol>
<li><p>如果当前的<strong>符号栈为空</strong>，就直接入栈。</p>
</li>
<li><p>如果符号栈有操作符，就进行比较,如果当前的操作符的优先级<strong>小于或者等于栈中的操作符</strong>， 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈。</p>
<p>再<strong>与新的符号栈顶进行比较</strong>，直到不再小于或等于栈顶操作符，将当前的操作符入符号栈。</p>
</li>
<li><p>如果当前的操作符的优先级<strong>大于栈中的操作符</strong>， 就直接入符号栈。</p>
</li>
</ol>
</li>
<li><p>当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行。</p>
</li>
<li><p>最后在数栈只有一个数字，就是表达式的结果。</p>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a class="link"   href="http://codeup.hustoj.com/contest.php?cid=100000602" >Codeup简易计算器<i class="fas fa-external-link-alt"></i></a> </p>
<p>代码写了很久，因为网上的教程在3.2步时：比较新操作符与栈顶的优先级，若小于或等于栈顶，则pop出两个数，pop出一个符号进行计算，随后将新符压入符号栈，并没有继续比较新的栈顶。对于公式1-2*3+4*5；当所有字符都被压入栈后，符号栈为-、*，数字栈为1、6、20，最后计算时：6*20&#x3D;120，1-120&#x3D;-119。</p>
<p>另外，弹出数字后，应注意是a-b，还是b-a。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stack codeup 问题 A: 简单计算器</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cal</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">char</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (t == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; b + a &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">return</span> b + a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; b - a &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">return</span> b - a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; b / a &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">return</span> b / a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; b * a &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">return</span> b * a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//char s[200];</span></span><br><span class="line">	string s;</span><br><span class="line">	map&lt;<span class="type">char</span>, <span class="type">double</span>&gt; op;</span><br><span class="line">	op[<span class="string">&#x27;+&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">	op[<span class="string">&#x27;-&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">	op[<span class="string">&#x27;*&#x27;</span>] = <span class="number">1</span>;<span class="comment">//优先级更高</span></span><br><span class="line">	op[<span class="string">&#x27;/&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">getline</span>(cin, s)) &#123;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;size&quot; &lt;&lt; s.size() &lt;&lt; endl;</span></span><br><span class="line">		stack &lt;<span class="type">char</span>&gt;oper;</span><br><span class="line">		stack &lt;<span class="type">double</span>&gt;num;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; s.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//cout &lt;&lt; s;</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>();) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">				i++;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!(s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>)) &#123;<span class="comment">//符号</span></span><br><span class="line">				<span class="keyword">if</span> (oper.<span class="built_in">empty</span>() == <span class="literal">true</span>) &#123;<span class="comment">//如果符号栈空，则直接入栈</span></span><br><span class="line">					<span class="type">char</span> n = s[i];</span><br><span class="line">					oper.<span class="built_in">push</span>(n);</span><br><span class="line">					<span class="comment">//cout &lt;&lt; &quot;符号入栈&quot; &lt;&lt; oper.top() &lt;&lt; endl;</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;<span class="comment">//符号栈非空，与top进行优先级比较</span></span><br><span class="line">					<span class="keyword">if</span> (op[s[i]] &lt;= op[oper.<span class="built_in">top</span>()]) &#123;<span class="comment">//出两个数字和一个操作符进行计算</span></span><br><span class="line">						<span class="keyword">while</span> (oper.<span class="built_in">size</span>() &gt;= <span class="number">1</span> &amp;&amp; op[s[i]] &lt;= op[oper.<span class="built_in">top</span>()]) &#123;<span class="comment">//继续比较</span></span><br><span class="line">							<span class="type">double</span> a = num.<span class="built_in">top</span>();<span class="comment">//数字出栈</span></span><br><span class="line">							num.<span class="built_in">pop</span>();</span><br><span class="line">							<span class="comment">//cout &lt;&lt; &quot;数字出栈&quot; &lt;&lt; a &lt;&lt; &quot; &quot;;</span></span><br><span class="line">							<span class="type">double</span> b = num.<span class="built_in">top</span>();</span><br><span class="line">							num.<span class="built_in">pop</span>();</span><br><span class="line">							<span class="comment">//cout &lt;&lt; &quot;数字出栈&quot; &lt;&lt; b &lt;&lt; &quot; &quot;;</span></span><br><span class="line">							<span class="type">char</span> t;<span class="comment">//符号出栈</span></span><br><span class="line">							t = oper.<span class="built_in">top</span>();</span><br><span class="line">							oper.<span class="built_in">pop</span>();</span><br><span class="line">							<span class="comment">//cout &lt;&lt; &quot;符号出栈&quot; &lt;&lt; t &lt;&lt; &quot; &quot;;</span></span><br><span class="line">							<span class="type">double</span> ans = <span class="built_in">cal</span>(a, b, t);</span><br><span class="line">							num.<span class="built_in">push</span>(ans);</span><br><span class="line">						&#125;</span><br><span class="line">						oper.<span class="built_in">push</span>(s[i]);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;<span class="comment">//新运算符优先级高，直接入栈</span></span><br><span class="line">						oper.<span class="built_in">push</span>(s[i]);</span><br><span class="line">						<span class="comment">//cout &lt;&lt; &quot;符号入栈&quot; &lt;&lt; oper.top();</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;<span class="comment">//数字</span></span><br><span class="line">				<span class="type">int</span> temp = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				i++;</span><br><span class="line">				<span class="keyword">while</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">					temp = temp * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">					i++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//cout &lt;&lt; &quot;数字入栈&quot; &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">				num.<span class="built_in">push</span>(temp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//double ans = num.top();</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">while</span> (num.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="type">double</span> a = num.<span class="built_in">top</span>();</span><br><span class="line">			num.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="type">double</span> b = num.<span class="built_in">top</span>();</span><br><span class="line">			num.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="type">char</span> t = oper.<span class="built_in">top</span>();</span><br><span class="line">			oper.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="type">double</span> ans = <span class="built_in">cal</span>(a, b, t);</span><br><span class="line">			num.<span class="built_in">push</span>(ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, num.<span class="built_in">top</span>(), <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h1><p><code> 1+((2+3)* 4)-5</code> 转换为<code>123+4*+5–</code> </p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol>
<li>遍历中缀表达式。</li>
<li>当读到<strong>数字</strong>时，立即把它输出，即成为后缀表达式的一部分。</li>
<li>若读到操作符，判断该符号与栈顶符号的优先级：<ol>
<li>若该符号优先级<strong>高于栈顶元素</strong>，则将该操作符入栈。</li>
<li>否则就一次把栈中运算符弹出并加到后缀表达式尾端，直到遇到优先级低于该操作符的栈元素，然后把该操作符压入栈中。</li>
<li>如果遇到<strong>”(”</strong>，直接压入栈中，如果遇到一个<strong>”)”</strong>，那么就将栈元素弹出并加到后缀表达式尾端，但左右括号并不输出。</li>
</ol>
</li>
<li>最后，如果读到中缀表达式的尾端，将栈元素<strong>依次完全弹出</strong>并加到后缀表达式尾端。</li>
</ol>
<h1 id="中缀转前缀"><a href="#中缀转前缀" class="headerlink" title="中缀转前缀"></a>中缀转前缀</h1><p><code>1+((2+3)*4)–5</code>转为<code>\-+1*+2345</code></p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol>
<li><strong>从右至左</strong>遍历中缀表达式。</li>
<li>如果是<strong>数字</strong>，直接输出，作为前缀表达式的一个直接转换表达式Temp（最后，前缀表达式由该表达式翻转得到）；</li>
<li>如果是<strong>运算符</strong>，则比较优先级：<ol>
<li>若该运算符优先级<strong>大于等于栈顶元素</strong>，则将该运算符<strong>入栈</strong>。</li>
<li>否则栈内元素出栈并加到Temp表达式尾端，<strong>直到该运算符大于等于栈顶元素</strong>的优先级时，再将该运算符压入栈中。</li>
<li>遇到<strong>右括号</strong>直接压入栈中，如果遇到一个<strong>左括号</strong>，那么就将栈元素弹出并加到Temp表达式尾端，但左右括号并不输出。</li>
</ol>
</li>
<li>最后，若运算符栈中还有元素，则将元素<strong>一次弹出</strong>并加到Temp表达式尾端，最后一步是将Temp表达式<strong>翻转</strong>。</li>
</ol>
<h1 id="前缀转中缀"><a href="#前缀转中缀" class="headerlink" title="前缀转中缀"></a>前缀转中缀</h1><p><code>-+1*+2345</code>转为<code>5-(1+(2+3)*4)</code></p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>只有数字栈</p>
<ol>
<li><strong>从右到左</strong>扫描前缀表达式</li>
<li>如果遇到<strong>数字</strong>，则入栈。</li>
<li>如果遇到<strong>操作符</strong>，则将栈顶个元素弹出，并和操作符结合写成表达式，作为中缀表达式。</li>
<li>如果遇到的操作符优先级大于已存在表达式的最后执行操作符的优先级，则将已存在的表达式加上（）。</li>
</ol>
<hr>
<p>参考 <a class="link"   href="https://blog.csdn.net/walkerkalr/article/details/22798365" > 前缀、中缀、后缀表达式转换详解<i class="fas fa-external-link-alt"></i></a> </p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
